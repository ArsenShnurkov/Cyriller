﻿<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages/Newtonsoft.Json.12.0.1/lib/net45/Newtonsoft.Json.dll" #>
<#@ assembly name="$(SolutionDir)Cyriller.Model/bin/Debug/net45/Cyriller.Model.dll" #>
<#@ assembly name="$(SolutionDir)Cyriller.Rule/bin/Debug/net45/Cyriller.Rule.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.IO.Compression" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Cyriller.Model" #>
<#@ import namespace="Cyriller.Model.Json" #>
<#@ import namespace="Cyriller.Rule" #>
<#@ output extension=".txt" #>
<#
    string path = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "nouns.json");
	string json = File.ReadAllText(path);
	NounJson[] nouns = JsonConvert.DeserializeObject<NounJson[]>(json);
	List<string> rules = new List<string>();
	List<string> lines = new List<string>();
	
	this.Write("// " + DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss"));
	this.Write(Environment.NewLine);
	this.Write("// This file is autogenerated by nouns.tt template.");
	this.Write(Environment.NewLine);
	this.Write("// DO NOT MODIFY IT!");
	this.Write(Environment.NewLine);
	this.Write("// Use nouns.json file instead.");
	this.Write(Environment.NewLine);
	this.Write(Environment.NewLine);

	foreach (NounJson noun in nouns)
	{
		NounRule rule = new NounRule(noun);

		int ruleIndex = rules.IndexOf(rule.Value);

		if (ruleIndex < 0)
		{
			ruleIndex = rules.Count;
			rules.Add(rule.Value);
		}

		lines.Add(noun.ToDictionaryString(ruleIndex));
	}

	this.WriteLine("// -- Start of the Rules block -- //");

	for (int i = 0; i < rules.Count; i++)
	{
		this.WriteLine(rules[i]);
	}
	
	this.WriteLine("// -- End of the Rules block -- //");
	this.WriteLine(string.Empty);

	foreach (string line in lines)
	{
		this.WriteLine(line);
	}
#>