using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Cyriller.Model;

namespace Cyriller
{
    public partial class CyrWord
    {
        protected CyrResult DeclineNoun2()
        {
            CyrResult r = new CyrResult(w,
                this.DeclineNoun2Case2(),
                this.DeclineNoun2Case3(),
                this.DeclineNoun2Case4(),
                this.DeclineNoun2Case5(),
                this.DeclineNoun2Case6());

            return r;
        }

        protected string DeclineNoun2Case2()
        {
            string t;

            if (w.RegexHasMatches("оток$"))
            {
                string[] toka = new string[] { "биоток", "быстроток", "вагонопоток", "водопроток", "водоток", "гидропоток", "грузопоток", "кровоток", "противоток", "фототок", "электроток", "пассажиропоток", "поток", "проток", "прямоток", "товаропоток" };

                if (toka.Contains(w))
                {
                    t = w + "а";
                }
                else
                {
                    t = w.ReplaceRegex("ок$", "ка");
                }
            }
            else if (w.RegexHasMatches("тор$") || w.RegexHasMatches("лен$"))
            {
                t = w + "а";
            }
            else if (w.RegexHasMatches(@"\w[аеёиоуыэюяр][чзтнмжлрсдвбш][ео][нк]$") || w.RegexHasMatches("[жпщ]ок$") || w.RegexHasMatches("[тбч][ео][кр]$"))
            {
                t = w.ReplaceRegex("[ое]([кнр])$", "$1а");
            }
            else if (w.RegexHasMatches("[шк]е[цк]$") || w.RegexHasMatches("ндец$") || w.RegexHasMatches("стец$"))
            {
                t = w.ReplaceRegex("е([цк])$", "$1а");
            }
            else if (w.RegexHasMatches("[аеиоуыэюя]рек$"))
            {
                t = w.ReplaceRegex("рек$", "рька");
            }
            else if (w.RegexHasMatches("[ео][ст]ок$"))
            {
                t = w.ReplaceRegex("ок$", "ка");
            }
            else if (w.RegexHasMatches("ей$"))
            {
                t = w.ReplaceRegex("ей$", "ья");
            }
            else if (w.RegexHasMatches("[жшщ]ий$"))
            {
                t = w.ReplaceRegex("ий$", "его");
            }
            else if (w.RegexHasMatches("[ктмлнв]ый$") || w.RegexHasMatches("[км]ий$"))
            {
                t = w.ReplaceRegex("[иы]й$", "ого");
            }
            else if (w.RegexHasMatches("[а][её]м$"))
            {
                t = w.ReplaceRegex(".м$", "йма");
            }
            else if (w.RegexHasMatches("тки$"))
            {
                t = w.ReplaceRegex("ки$", "ок");
            }
            else if (w.RegexHasMatches("[вд]ень$"))
            {
                t = w.ReplaceRegex("ень$", "ня");
            }
            else if (w.RegexHasMatches("це$"))
            {
                t = w.ReplaceRegex("е$", "а");
            }
            else if (w.RegexHasMatches("[бвгджзклмнпрстфхцчшщ]$"))
            {
                t = w + "а";
            }
            else if (w.RegexHasMatches("о$"))
            {
                t = w.ReplaceRegex("о$", "а");
            }
            else if (w.RegexHasMatches("[ео]е$"))
            {
                t = w.ReplaceRegex("е$", "го");
            }
            else if (w.RegexHasMatches("[жшщч]е$"))
            {
                t = w.ReplaceRegex("е$", "а");
            }
            else
            {
                t = w.ReplaceRegex(@"(\w)$", "я");
            }

            return t;
        }

        protected string DeclineNoun2Case3()
        {
            string t;

            if (w.RegexHasMatches("оток$"))
            {
                string[] toka = new string[] { "биоток", "быстроток", "вагонопоток", "водопроток", "водоток", "гидропоток", "грузопоток", "кровоток", "противоток", "фототок", "электроток", "пассажиропоток", "поток", "проток", "прямоток", "товаропоток" };

                if (toka.Contains(w))
                {
                    t = w + "у";
                }
                else
                {
                    t = w.ReplaceRegex("ок$", "ку");
                }
            }
            else if (w.RegexHasMatches("тор$") || w.RegexHasMatches("лен$"))
            {
                t = w + "у";
            }
            else if (w.RegexHasMatches(@"\w[аеёиоуыэюяр][чзтнмжлрсдвщбш][ео][нк]$") || w.RegexHasMatches("[жпщ]ок$"))
            {
                t = w.ReplaceRegex("[ео]([нк])$", "$1у");
            }
            else if (w.RegexHasMatches("[кш]е[кц]$"))
            {
                t = w.ReplaceRegex("е([кц])$", "$1у");
            }
            else if (w.RegexHasMatches("[аеиоуыэюя]рек$"))
            {
                t = w.ReplaceRegex("рек$", "рьку");
            }
            else if (w.RegexHasMatches("[тбч][ео][кр]$"))
            {
                t = w.ReplaceRegex("[ео]([кр])", "$1у");
            }
            else if (w.RegexHasMatches("[ео][ст]ок$"))
            {
                t = w.ReplaceRegex("ок$", "ку");
            }
            else if (w.RegexHasMatches("ей$"))
            {
                t = w.ReplaceRegex("ей$", "ью");
            }
            else if (w.RegexHasMatches("[жшщ]ий$"))
            {
                t = w.ReplaceRegex("ий$", "ему");
            }
            else if (w.RegexHasMatches("[ктмлнв]ый$") || w.RegexHasMatches("[км]ий$"))
            {
                t = w.ReplaceRegex("[иы]й$", "ому");
            }
            else if (w.RegexHasMatches("[а][её]м$"))
            {
                t = w.ReplaceRegex(".м$", "йму");
            }
            else if (w.RegexHasMatches("тки$"))
            {
                t = w.ReplaceRegex("ки$", "кам");
            }
            else if (w.RegexHasMatches("[вд]ень$"))
            {
                t = w.ReplaceRegex("ень$", "ню");
            }
            else if (w.RegexHasMatches("це$"))
            {
                t = w.ReplaceRegex("е$", "у");
            }
            else if (w.RegexHasMatches("[бвгджзклмнпрстфхцчшщ]$"))
            {
                t = w + "у";
            }
            else if (w.RegexHasMatches("шко$"))
            {
                string[] shke = new string[] { "амбаришко", "банчишко", "голосишко", "городишко", "дворишко", "домишко", "доходишко", "животишко", "заборишко", "заводишко", "месячишко", "носишко", "огородишко", "пиджачишко", "ротишко", "рублишко", "сараишко", "сараюшко", "сюртучишко", "умишко", "хвостишко", "хуторишко", "чемоданишко" };

                if (shke.Contains(w))
                {
                    t = w.ReplaceRegex("о$", "е");
                }
                else
                {
                    t = w.ReplaceRegex("о$", "у");
                }
            }
            else if (w.RegexHasMatches("(о)$"))
            {
                t = w.ReplaceRegex("(о)$", "у");
            }
            else if (w.RegexHasMatches("[ео]е$"))
            {
                t = w.ReplaceRegex("е$", "му");
            }
            else if (w.RegexHasMatches("[жшщч]е$"))
            {
                t = w.ReplaceRegex("е$", "у");
            }
            else
            {
                t = w.ReplaceRegex(@"(\w)$", "ю");
            }

            return t;
        }

        protected string DeclineNoun2Case4()
        {
            string t;

            if (w.RegexHasMatches("ей$"))
            {
                t = w.ReplaceRegex("ей$", "ья");
            }
            else if (w.RegexHasMatches("[жшщ]ий$") && this.animate == AnimatesEnum.Animated)
            {
                t = w.ReplaceRegex("ий$", "его");
            }
            else if (w.RegexHasMatches("тий$") && this.animate == AnimatesEnum.Animated)
            {
                t = w.ReplaceRegex("й$", "я");
            }
            else if (w.RegexHasMatches("[мктнлв][иы]й$") && this.animate == AnimatesEnum.Animated)
            {
                t = w.ReplaceRegex("[иы]й$", "ого");
            }
            else if (w.RegexHasMatches("[ьй]$") && this.animate == AnimatesEnum.Inanimated)
            {
                t = w;
            }
            else if (w.RegexHasMatches("[ьй]$") && this.animate == AnimatesEnum.Animated)
            {
                t = w.ReplaceRegex("[ьй]$", "я");
            }
            else if (w.RegexHasMatches(@"\w[аеёиоуыэюяр][чзнлшсжвщтдмр][ео]к$") && this.animate == AnimatesEnum.Animated)
            {
                t = w.ReplaceRegex("[ео]к$", "ка");
            }
            else if ((w.RegexHasMatches("б[ео][кр]$") && this.animate == AnimatesEnum.Animated))
            {
                t = w.ReplaceRegex("[ео]([кр])$", "$1а");
            }
            else if (w.EndsWith("ныш") || w == "завклуб" || w == "кашуб"
                || w.RegexHasMatches("[ое]вич$")
                || (w.RegexHasMatches("щик$") && this.animate == AnimatesEnum.Animated)
                || w.RegexHasMatches("[мр]яш$"))
            {
                t = w + "а";
            }
            else if (w.RegexHasMatches("[аеёиоуыэюя]рек$") && this.animate == AnimatesEnum.Animated)
            {
                t = w.ReplaceRegex("рек$", "рька");
            }
            else if (this.animate == AnimatesEnum.Animated && w.RegexHasMatches("[ое]$") && this.gender != GendersEnum.Neuter)
            {
                if (w.RegexHasMatches(@"ь[ое]$"))
                {
                    t = w.ReplaceRegex("[ое]$", "я");
                }
                else
                {
                    t = w.ReplaceRegex("[ое]$", "а");
                }
            }
            else if (this.animate == AnimatesEnum.Animated && this.gender != GendersEnum.Neuter)
            {
                t = w + "а";
            }
            else
            {
                t = w;
            }

            return t;
        }

        protected string DeclineNoun2Case5()
        {
            string[] om = new string[] { "алкаш", "беляш", "бердыш", "ганаш", "гладыш", "глупыш", "голыш", "грош", "гуляш", "дурныш", "ёрш", "ингуш", "камыш", "карандаш", "кеш", "кишмиш", "ковш", "кореш", "коротыш", "крепыш", "круглыш", "кругляш", "кудряш", "кулеш", "кунтуш", "кэш", "латыш", "легаш", "малыш", "метакэш", "мордаш", "мураш", "палаш", "племяш", "поташ", "слепыш", "слэш", "спорыш", "талыш", "торгаш", "тупыш", "черныш", "чуваш", "шалаш", "шиш",
                "басмач", "бирюч", "бич", "богач", "бородач", "брюхач", "ветврач", "военврач", "волосач", "врач", "гамма-луч", "главврач", "головач", "горбач", "горлач", "грач", "дергач", "диетврач", "драч", "дрегович", "зурнач", "избач", "калач", "кедрач", "кирпич", "ключ", "ковач", "копач", "кормач", "косач", "космач", "костромич", "кривич", "крылач", "кулич", "кумач", "лихач", "ловкач", "лохмач", "луч", "магарыч", "меч", "мигач", "москвич", "мохнач", "мяч", "носач", "нюхач", "омич", "палач", "пантач", "паныч", "паралич", "первач", "пернач", "пихтач", "плечо", "портач", "пскович", "пугач", "пузач", "рвач", "рифмач", "рогач", "рядович", "санврач", "сарыч", "секач", "сивуч", "силач", "скоробогач", "скрипач", "слухач", "смехач", "сморкач", "снохач", "сныч", "спотыкач", "стрекач", "строгач", "стукач", "сургуч", "сыч", "тирлич", "ткач", "толкач", "толмач", "трепач", "трубач", "трюкач", "тягач", "усач", "хохмач", "хрыч", "целкач", "циркач",
                "авиаспецмонтаж", "автогараж", "агромехмонтаж", "агромонтаж", "агропроммехмонтаж", "агропромспецстроймонтаж", "агроспецмонтаж", "алтайагроспецмонтаж", "алтайремстроймонтаж", "амурэлектромонтаж", "ангарсктеплохиммонтаж", "багаж", "балаковоагропроммехмонтаж", "балашовагропроммехмонтаж", "балтмонтаж", "бамтранстехмонтаж", "бандаж", "башэлектромонтаж", "благсантехмонтаж", "блиндаж", "брянсксантехмонтаж", "бурятагропроммехмонтаж", "велижагропромтехмонтаж", "верхневолгоэлектромонтаж", "вираж", "витраж", "владимирэнергомонтаж", "волгаэнергомонтаж", "волгонефтехиммонтаж", "волгоспецмонтаж", "волгостальмонтаж", "волгоэлектромонтаж", "волгоэнергомонтаж", "вольтаж", "воронежагроспецмонтаж", "востокгидромонтаж", "востокметаллургмонтаж", "востокнефтегазсантехмонтаж", "востокнефтезаводмонтаж", "востоксантехмонтаж", "востоксибсантехмонтаж", "востоктехмонтаж", "востокэнергомонтаж", "газсантехмонтаж", "гараж", "гидромонтаж", "гидроэлектромонтаж", "грузобагаж", "дальорглестехмонтаж", "дальэлектромонтаж", "дальэнергомонтаж", "дергачиагропроммехмонтаж", "донэлектромонтаж", "забайкалэлектромонтаж", "заграноргстроймонтаж", "запсибнефтехиммонтаж", "запсибэнергоспецмонтаж", "зернофураж", "ижметаллургмонтаж", "камазмонтаж", "камер-паж", "киномонтаж", "коммунмонтаж", "краснокутагропроммехмонтаж", "красноярскагропроммехмонтаж", "кузбассшахтостроймонтаж", "купаж", "кураж", "лесдревмонтаж", "липецкмонтаж", "листаж", "литмонтаж", "литраж", "магаданспецэнергомонтаж", "марспецмонтаж", "металлургмеханомонтаж", "металлургпрокатмонтаж", "метраж", "мираж", "монтаж", "москабельсетьмонтаж", "москвичстроймонтаж", "мослифтмонтаж", "моспроммонтаж", "моспромтехмонтаж", "мосспецатомэнергомонтаж", "мосспецмонтаж", "мосэлектромонтаж", "мосэнергомонтаж", "назаровомехмонтаж", "нефтегазмонтаж", "нефтехиммонтаж", "новгородсельхозмонтаж", "новобурасскагропроммехмонтаж", "норильскреммонтаж", "обьэлектромонтаж", "омэлектромонтаж", "орглестехмонтаж", "оренбургкомплектмонтаж", "оренбургсантехмонтаж", "паж", "петрозаводскагропроммонтаж", "подэтаж", "проммеханомонтаж", "проммонтаж", "промсвязьмонтаж", "промтехмонтаж", "промтранстехмонтаж", "промэлектромонтаж", "пугачевагропроммехмонтаж", "радиомонтаж", "росспецэнергомонтаж", "ростовремстроймонтаж", "ртищевоагропроммехмонтаж", "рыбинскмехмонтаж", "саж", "сантехмонтаж", "сантехэлектромонтаж", "саратовспецмонтаж", "саровгидромонтаж", "сахалинморнефтемонтаж", "связьэлектромонтаж", "северовостокэлектромонтаж", "севзапбиостроймонтаж", "севзапстроймонтаж", "севзапэлектромонтаж", "севзапэнергомонтаж", "севкавэнергомонтаж", "севсантехмонтаж", "сенаж", "сенофураж", "сибкомплектмонтаж", "сибметаллургмонтаж", "сибнефтехиммонтаж", "сибнефтькомплектмонтаж", "сибпродмонтаж", "сибсантехмонтаж", "сибспецмонтаж", "сибспецэнергомонтаж", "сибтехмонтаж", "сибхиммонтаж", "сибэлектромонтаж", "сибэнергомонтаж", "смоленскагропроммехмонтаж", "сосновоборэлектромонтаж", "союзлесмонтаж", "союзлифтмонтаж", "союзмясомолмонтаж", "союзпроммонтаж", "союзстекломонтаж", "спецатоммонтаж", "спецмашмонтаж", "спецстроймонтаж", "спецтеплохиммонтаж", "спецхиммонтаж", "спецэлектромонтаж", "спецэнергомонтаж", "ставропольскагропроммехмонтаж", "стальмонтаж", "стеллаж", "строймонтаж", "стройтехмонтаж", "стройэлектромонтаж", "сутаж", "тамбовагромонтаж", "таткомплектмонтаж", "тепломонтаж", "теплоэнергомонтаж", "техмонтаж", "типаж", "тираж", "товаробагаж", "трансэлектромонтаж", "трансэнергомонтаж", "туваагропромспецмонтаж", "уралметаллургмонтаж", "уралпроммонтаж", "уралсантехмонтаж", "уралтранстехмонтаж", "уралхиммонтаж", "уралэнергомонтаж", "фотомонтаж", "фураж", "хлебофураж", "центроэлектромонтаж", "центроэнергомонтаж", "центрэлектромонтаж", "шантаж", "шахтомонтаж", "шефмонтаж", "электрозапсибмонтаж", "электромонтаж", "электросевкавмонтаж", "электросибмонтаж", "электроуралмонтаж", "электроцентромонтаж", "энгельсагромонтаж", "энгельсагропроммехмонтаж", "энергометаллургмонтаж", "энергомонтаж", "энергоспецмонтаж", "этаж", "южуралэлектромонтаж",
                "артишок", "афтершок", "шок", "электрошок", "корж", "морж", "крыж", "пыж" };

            if (om.Contains(w))
            {
                if (w.EndsWith("о"))
                {
                    return w + "м";
                }

                return w + "ом";
            }

            string[] ym = new string[] { "сердечкин", "топтыгин" };

            if (ym.Contains(w))
            {
                return w + "ым";
            }

            string t;

            if (w.RegexHasMatches("зац$") || w.RegexHasMatches("таж$"))
            {
                t = w + "ем";
            }
            else if (w.RegexHasMatches("оток$"))
            {
                string[] toka = new string[] { "биоток", "быстроток", "вагонопоток", "водопроток", "водоток", "гидропоток", "грузопоток", "кровоток", "противоток", "фототок", "электроток", "пассажиропоток", "поток", "проток", "прямоток", "товаропоток" };

                if (toka.Contains(w))
                {
                    t = w + "ом";
                }
                else
                {
                    t = w.ReplaceRegex("ок$", "ком");
                }
            }
            else if (w.RegexHasMatches("тор$") || w.RegexHasMatches("лен$"))
            {
                t = w + "ом";
            }
            else if (w.RegexHasMatches(@"\w[аеёиоуыэюяр][шчзтнмжлрсдвщб][ео][нк]$") || w.RegexHasMatches("[жпщ]ок$"))
            {
                t = w.ReplaceRegex("[ео]([нк])$", "$1ом");
            }
            else if (w.RegexHasMatches("[аеиоуыэюя]рек$"))
            {
                t = w.ReplaceRegex("рек$", "рьком");
            }
            else if (w.RegexHasMatches("[тбч]е[кр]$") || w.RegexHasMatches("чок$"))
            {
                t = w.ReplaceRegex("[ео]([кр])$", "$1ом");
            }
            else if (w.RegexHasMatches("[ео][ст]ок$"))
            {
                t = w.ReplaceRegex("ок$", "ком");
            }
            else if (w.RegexHasMatches("[а][её]м$"))
            {
                t = w.ReplaceRegex(".м$", "ймом");
            }
            else if (w.RegexHasMatches("уж$"))
            {
                string[] em = new string[] { "дорогобуж", "муж" };

                if (em.Contains(w))
                {
                    t = w + "ем";
                }
                else
                {
                    t = w + "ом";
                }
            }
            else if (w.RegexHasMatches("[жшчц]$"))
            {
                t = w + "ем";
            }
            else if (w.RegexHasMatches("[ктмнлв]ый$") || w.RegexHasMatches("[км]ий$"))
            {
                t = w.ReplaceRegex("й$", "м");
            }
            else if (w.RegexHasMatches("[вд]ень$"))
            {
                t = w.ReplaceRegex("ень$", "нем");
            }
            else if (w.RegexHasMatches("[бвгдзклмнпрстфхщ]$"))
            {
                t = w + "ом";
            }
            else if (w.RegexHasMatches("шко$"))
            {
                string[] koy = new string[] { "амбаришко", "банчишко", "голосишко", "городишко", "дворишко", "домишко", "доходишко", "животишко", "заборишко", "заводишко", "месячишко", "носишко", "огородишко", "пиджачишко", "ротишко", "рублишко", "сараишко", "сараюшко", "сюртучишко", "умишко", "хвостишко", "хуторишко", "чемоданишко" };

                if (koy.Contains(w))
                {
                    t = w + "й";
                }
                else
                {
                    t = w + "м";
                }
            }
            else if (w.RegexHasMatches("[жчшщгк][ео]е$") || w.RegexHasMatches("нее$"))
            {
                t = w.ReplaceRegex("..$", "им");
            }
            else if (w.RegexHasMatches("[ео]е$"))
            {
                t = w.ReplaceRegex("..$", "ым");
            }
            else if (w.RegexHasMatches("[еёо]$"))
            {
                t = w + "м";
            }
            else if (w.RegexHasMatches("[жншщ]ий$"))
            {
                t = w.ReplaceRegex("й$", "м");
            }
            else if (w.RegexHasMatches("тки$"))
            {
                t = w.ReplaceRegex("ки$", "ками");
            }
            else if (w.RegexHasMatches("ош$"))
            {
                t = w + "ем";
            }
            else if (w.EndsWith("ь"))
            {
                string[] yom = new string[] { "адрес-календарь", "алтарь", "батырь", "блатарь", "бобыль", "богатырь", "бондарь", "бугай", "букварь", "бунтарь", "бытие", "валуй", "вице-король", "волгарь", "волдырь", "враль", "вратарь", "газырь", "гвоздарь", "главарь", "глухарь", "гнездарь", "голавль", "горбыль", "грабарь", "декабрь", "дикарь", "день", "дударь", "дымарь", "журавль", "заградогонь", "звонарь", "золотарь", "имбирь", "инвентарь", "календарь", "карась", "кендырь", "кий", "кизиль", "ключарь", "кобзарь", "коваль", "ковыль", "колотье", "корабль", "король", "корчмарь", "косарь", "костерь", "костыль", "косырь", "кремль", "кремень", "крохаль", "кубарь", "куль", "купырь", "куркуль", "кустарь", "ларь", "линь", "лишай", "ложкарь", "ломоть", "лунь", "мизгирь", "миндаль", "миткаль", "мишарь", "монастырь", "москаль", "мотыль", "муравей", "нашатырь", "нетопырь", "ноль", "носарь", "ноябрь", "нуль", "огонь", "октябрь", "орарь", "патруль", "пенье", "пескарь", "пехтерь", "плетень", "плугарь", "пень", "поводырь", "полудикарь", "полпути", "пономарь", "почтарь", "псалтырь", "псарь", "пузырь", "пупырь", "пустырь", "путь", "пушкарь", "ремень", "репей", "рогаль", "рубль", "руль", "ручей", "рыбарь", "сазандарь", "свинарь", "секарь", "секретарь", "сентябрь", "сизарь", "синаксарь", "скобарь", "слепень", "словарь", "снегирь", "соловей", "спортинвентарь", "статс-секретарь", "стихарь", "строгаль", "сухарь", "текстиль", "технарь", "тропарь", "трудодень", "уголь", "угорь", "упырь", "февраль", "ферзь", "фитиль", "фонарь", "хмырь", "холуй", "хрусталь", "царь", "чеботарь", "чекмарь", "человеко-день", "червь", "чигирь", "чихирь", "шинкарь", "шпинь", "шпынь", "штукарь", "штырь", "язь", "январь", "янтарь", "ясырь" };

                if (yom.Contains(w))
                {
                    t = w.ReplaceRegex(@"(\w)$", "ём");
                }
                else
                {
                    t = w.ReplaceRegex(@"(\w)$", "ем");
                }
            }
            else if (w.EndsWith("й"))
            {
                string[] yom = new string[] { "бугай", "валуй", "кий", "лишай", "холуй" };

                if (yom.Contains(w))
                {
                    t = w.ReplaceRegex(@"(\w)$", "ём");
                }
                else
                {
                    t = w.ReplaceRegex(@"(\w)$", "ем");
                }
            }
            else
            {
                t = w.ReplaceRegex(@"(\w)$", "ем");
            }

            return t;
        }

        protected string DeclineNoun2Case6()
        {
            string t;

            if (w.RegexHasMatches("оток$"))
            {
                string[] toka = new string[] { "биоток", "быстроток", "вагонопоток", "водопроток", "водоток", "гидропоток", "грузопоток", "кровоток", "противоток", "фототок", "электроток", "пассажиропоток", "поток", "проток", "прямоток", "товаропоток" };

                if (toka.Contains(w))
                {
                    t = w + "е";
                }
                else
                {
                    t = w.ReplaceRegex("ок$", "ке");
                }
            }
            else if (w.RegexHasMatches("тор$") || w.RegexHasMatches("лен$"))
            {
                t = w + "е";
            }
            else if (w.RegexHasMatches(@"\w[аеёиоуыэюяр][чзтнмжлрсдвщбш][ео][нк]$") || w.RegexHasMatches("[жпщ]ок$"))
            {
                t = w.ReplaceRegex("[ео]([нк])$", "$1е");
            }
            else if (w.RegexHasMatches(@"\w[шкв]е[кц]$"))
            {
                t = w.ReplaceRegex("е([кц])$", "$1е");
            }
            else if (w.RegexHasMatches("[аеёиоуыэюя]рек$"))
            {
                t = w.ReplaceRegex("рек$", "рьке");
            }
            else if (w.RegexHasMatches("[тбч][ео][кр]$"))
            {
                t = w.ReplaceRegex("[ео]([кр])", "$1е");
            }
            else if (w.RegexHasMatches("ей$"))
            {
                t = w.ReplaceRegex("ей$", "ье");
            }
            else if (w.RegexHasMatches("[жшщ]ий$"))
            {
                t = w.ReplaceRegex("ий$", "ем");
            }
            else if (w.RegexHasMatches("[ктмнлв]ый$") || w.RegexHasMatches("[км]ий$"))
            {
                t = w.ReplaceRegex("[иы]й$", "ом");
            }
            else if (w.RegexHasMatches("[а][её]м$"))
            {
                t = w.ReplaceRegex(".м$", "йме");
            }
            else if (w.RegexHasMatches("тки$"))
            {
                t = w.ReplaceRegex("ки$", "ках");
            }
            else if (w.RegexHasMatches("[вд]ень$"))
            {
                t = w.ReplaceRegex("ень$", "не");
            }
            else if (w.RegexHasMatches("[бвгджзклмнпрстфхцчшщ]$"))
            {
                t = w + "е";
            }
            else if (w.RegexHasMatches(@"и\w$"))
            {
                string[] ie = new string[] { "остриё", "плие" };

                if (ie.Contains(w))
                {
                    t = w.ReplaceRegex(@".$", "е");
                }
                else
                {
                    t = w.ReplaceRegex(@".$", "и");
                }
            }
            else if (w.RegexHasMatches("[ео]е$"))
            {
                t = w.ReplaceRegex("е$", "м");
            }
            else
            {
                t = w.ReplaceRegex(@"(\w)$", "е");
            }

            return t;
        }

        protected CyrResult DeclineNoun2Simple(bool Em = false)
        {
            CyrResult r = new CyrResult(w, w + "а", w + "у", this.IsAnimated ? w + "а" : w, Em ? w + "ем" : w + "ом", w + "е");

            return r;
        }

        protected CyrResult DeclineNoun2WithoutSuffix(bool Em = false)
        {
            CyrResult r = new CyrResult(w,
                w.ReplaceRegex(@"\w(\w)$", "$1а"),
                w.ReplaceRegex(@"\w(\w)$", "$1у"),
                this.IsAnimated ? w.ReplaceRegex(@"\w(\w)$", "$1а") : w,
                Em ? w.ReplaceRegex(@"\w(\w)$", "$1ем") : w.ReplaceRegex(@"\w(\w)$", "$1ом"),
                w.ReplaceRegex(@"\w(\w)$", "$1е"));
            
            return r;
        }
    }
}
